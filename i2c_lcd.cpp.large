#include <TinyGPS++.h>
#include "config.h"

#ifdef I2C16X2
#include <LiquidCrystal_I2C.h>
// LiquidCrystal_I2C lcd(0x27,16,2); // 0x20 is adresss for LCC 16x2
LiquidCrystal_I2C lcd(0x3F,16,2); // 0x20 is adresss for LCC 16x2

// LCD Large fonts
// the 8 arrays that form each segment of the custom numbers

/*
byte LT[8] = {
    B00011, B00111, B01111, B01111,
    B01111, B01111, B01111, B01111
};
*/
byte UB[8] = {
    B11111, B11111, B11111, B00000,
    B00000, B00000, B00000, B00000
};

byte RT[8] = {
    B11100, B11110, B11111, B11111,
    B11111, B11111, B11111, B11111
};

byte LL[8] = {
    B01111, B01111, B01111, B01111,
    B01111, B01111, B00111, B00011
};

byte LB[8] = {
    B00000, B00000, B00000, B00000,
    B00000, B11111, B11111, B11111
};
/*
byte LR[8] = {
    B11111, B11111, B11111, B11111,
    B11111, B11111, B11110, B11100
};
*/
byte UMB[8] = {
    B11111, B11111, B11111, B00000,
    B00000, B00000, B11111, B11111
};

byte LMB[8] = {
    B11111, B00000, B00000, B00000,
    B00000, B11111, B11111, B11111
};

/// LCD Large fonts

void lcd_setup(char *v) {
    lcd.createChar(1, RT);
    lcd.createChar(2, UB);
//  lcd.createChar(3, LL);
    lcd.createChar(4, LB);
//  lcd.createChar(5, LR);
    lcd.createChar(6, UMB);
    lcd.createChar(0, LMB);
//  lcd.createChar(8, LT);
    lcd.backlight();
    lcd.begin();
    lcd.print(v);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////
// LCD Large fonts
static void custom00(int x) { // uses segments to build the number 0
    lcd.setCursor(x, 0);
    lcd.write(255);
    lcd.write(2);
    lcd.write(255);
    lcd.setCursor(x, 1);
    lcd.write(255);
    lcd.write(4);
    lcd.write(255);
}

static void custom1(int x) {
   lcd.setCursor(x, 0);
   lcd.write(2);
   lcd.write(255);
   lcd.setCursor(x + 1, 1);
   lcd.write(255);
}

static void custom2(int x) {
    lcd.setCursor(x, 0);
    lcd.write(6);
    lcd.write(6);
    lcd.write(255);
    lcd.setCursor(x, 1);
    lcd.write(255);
    lcd.write(0);
    lcd.write(0);
}

static void custom3(int x) {
    lcd.setCursor(x, 0);
    lcd.write(6);
    lcd.write(6);
    lcd.write(255);
    lcd.setCursor(x, 1);
    lcd.write(0);
    lcd.write(0);
    lcd.write(255);
}

static void custom4(int x) {
    lcd.setCursor(x, 0);
    lcd.write(255);
    lcd.write(4);
    lcd.write(255);
    lcd.setCursor(x + 2, 1);
    lcd.write(255);
}

static void custom5(int x) {
    lcd.setCursor(x, 0);
    lcd.write(255);
    lcd.write(6);
    lcd.write(6);
    lcd.setCursor(x, 1);
    lcd.write(0);
    lcd.write(0);
    lcd.write(255);
}

static void custom6(int x) {
    lcd.setCursor(x, 0);
    lcd.write(255);
    lcd.write(6);
    lcd.write(6);
    lcd.setCursor(x, 1);
    lcd.write(255);
    lcd.write(0);
    lcd.write(255);
}

static void custom7(int x) {
    lcd.setCursor(x, 0);
    lcd.write(2);
    lcd.write(2);
    lcd.write(255);
    lcd.setCursor(x+1, 1);
    lcd.write(255);
}

static void custom8(int x) {
    lcd.setCursor(x, 0);
    lcd.write(255);
    lcd.write(6);
    lcd.write(255);
    lcd.setCursor(x, 1);
    lcd.write(255);
    lcd.write(0);
    lcd.write(255);
}

static void custom9(int x) {
    lcd.setCursor(x, 0);
    lcd.write(255);
    lcd.write(6);
    lcd.write(255);
    lcd.setCursor(x + 2, 1);
    lcd.write(255);
}

static void displayLargeSpeed(int num, TinyGPSPlus &gps) {
    int digit4 =  num / 1000;
    int digit3 = (num % 1000) / 100;
    int digit2 = (num % 100) / 10;
    int digit1 =  num % 10;
    int x = 0;

    switch (digit3) {
    case 0:
        // Do not display first zero
        //custom00(x);
        break;
    case 1:
        custom1(x);
        break;
    case 2:
        custom2(x);
        break;
    case 3:
        custom3(x);
        break;
    case 4:
        custom4(x);
        break;
    case 5:
        custom5(x);
        break;
    case 6:
        custom6(x);
        break;
    case 7:
        custom7(x);
        break;
    case 8:
        custom8(x);
        break;
    case 9:
        custom9(x);
        break;
    }

    x = 4;
    switch (digit2) {
    case 0:
        custom00(x);
        break;
    case 1:
        custom1(x);
        break;
    case 2:
        custom2(x);
        break;
    case 3:
        custom3(x);
        break;
    case 4:
        custom4(x);
        break;
    case 5:
        custom5(x);
        break;
    case 6:
        custom6(x);
        break;
    case 7:
        custom7(x);
        break;
    case 8:
        custom8(x);
        break;
    case 9:
        custom9(x);
        break;
    }

    x = 8;
    switch (digit1) {
    case 0:
        custom00(x);
        break;
    case 1:
        custom1(x);
        break;
    case 2:
        custom2(x);
        break;
    case 3:
        custom3(x);
        break;
    case 4:
        custom4(x);
        break;
    case 5:
        custom5(x);
        break;
    case 6:
        custom6(x);
        break;
    case 7:
        custom7(x);
        break;
    case 8:
        custom8(x);
        break;
    case 9:
        custom9(x);
        break;
    }

    uint16_t s = gps.satellites.value();
    lcd.setCursor(13, 0);
    if (s < 10) {
        lcd.print(" ");
    }
    lcd.print(s);
    lcd.print("s");

    // Print degree or N/S/E/W headings
    uint16_t d = (uint16_t)gps.course.deg();
    lcd.setCursor(12,1);
    if (d < 100) {
        lcd.print("0");
    }
    if (d < 10) {
        lcd.print("0");
    }
    lcd.print(d);
    lcd.print("d");
}

void lcd_screen1(TinyGPSPlus &gps) {
    lcd.clear();
    displayLargeSpeed((unsigned int)gps.speed.kmph(), gps);
}

void lcd_screen2(TinyGPSPlus &gps, float base, uint16_t txCounter, uint16_t packetDecoded) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("B:");
    lcd.print((uint16_t)base);     // Max 999

    lcd.setCursor(6, 0);
    lcd.print("T:");
    lcd.print(txCounter);  // Max 999

    // Max 2 digits10w

    lcd.setCursor(12, 0);
    lcd.print("R:");
    lcd.print(packetDecoded);  // Max 99

    lcd.setCursor(0, 1);
    lcd.print("U:");
    lcd.print(millis() / 60000); // Max 999

    lcd.setCursor(6, 1);
    lcd.print("A:");
    lcd.print((uint16_t)gps.altitude.meters()); // Max 9999
}

void lcd_screen3(TinyGPSPlus &gps) {
    lcd.clear();
    lcd.setCursor(0, 0);

    char *timeString = "00:00:00";
    uint8_t x = gps.time.hour();
    timeString[0] = x / 10 + '0';
    timeString[1] = x % 10 + '0';

    x = gps.time.minute();
    timeString[3] = x / 10 + '0';
    timeString[4] = x % 10 + '0';

    x = gps.time.second();
    timeString[6] = x / 10 + '0';
    timeString[7] = x % 10 + '0';

    lcd.print(timeString);

    lcd.print(" H:");
    lcd.print(gps.hdop.value(), 1);

    lcd.setCursor(0, 1);
    lcd.print(gps.location.lat(), 4);
    lcd.setCursor(8, 1);
    lcd.print(gps.location.lng(), 4);
}

void lcd_screen4(char *callsign, char *comment, float distanceToWaypoint) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print(callsign);

    if (distanceToWaypoint < 500) {
        lcd.print(" ");
        lcd.print(distanceToWaypoint, 1);
        lcd.print("km");
    }

    lcd.setCursor(0, 1);
    comment[16] = 0;
    lcd.print(comment);
}

void lcd_config_start(char *mycall, int ssid) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Config:");
    lcd.setCursor(0, 1);
    lcd.print(mycall);
    lcd.print("-");
    lcd.print(ssid);
}

void lcd_config_done() {
    lcd.setCursor(0, 0);
    lcd.print("Done...");
}

#endif
